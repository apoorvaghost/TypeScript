=== tests/cases/compiler/whatever.d.ts ===
export class Cool {
>Cool : Symbol(Cool, Decl(whatever.d.ts, 0, 0))

    spot: number;
>spot : Symbol(Cool.spot, Decl(whatever.d.ts, 0, 19))
}
export class World {
>World : Symbol(World, Decl(whatever.d.ts, 2, 1))

    marvelous: string;
>marvelous : Symbol(World.marvelous, Decl(whatever.d.ts, 3, 20))
}
export function dit(smth: number | '0' | '1' | '2'): Cool & World;
>dit : Symbol(dit, Decl(whatever.d.ts, 5, 1))
>smth : Symbol(smth, Decl(whatever.d.ts, 6, 20))
>Cool : Symbol(Cool, Decl(whatever.d.ts, 0, 0))
>World : Symbol(World, Decl(whatever.d.ts, 2, 1))

export function keys<T>(t: T): keyof T;
>keys : Symbol(keys, Decl(whatever.d.ts, 6, 66))
>T : Symbol(T, Decl(whatever.d.ts, 7, 21))
>t : Symbol(t, Decl(whatever.d.ts, 7, 24))
>T : Symbol(T, Decl(whatever.d.ts, 7, 21))
>T : Symbol(T, Decl(whatever.d.ts, 7, 21))

export function single<T, K extends keyof T>(t: T, k: K): T[K];
>single : Symbol(single, Decl(whatever.d.ts, 7, 39))
>T : Symbol(T, Decl(whatever.d.ts, 8, 23))
>K : Symbol(K, Decl(whatever.d.ts, 8, 25))
>T : Symbol(T, Decl(whatever.d.ts, 8, 23))
>t : Symbol(t, Decl(whatever.d.ts, 8, 45))
>T : Symbol(T, Decl(whatever.d.ts, 8, 23))
>k : Symbol(k, Decl(whatever.d.ts, 8, 50))
>K : Symbol(K, Decl(whatever.d.ts, 8, 25))
>T : Symbol(T, Decl(whatever.d.ts, 8, 23))
>K : Symbol(K, Decl(whatever.d.ts, 8, 25))

// TODO: Index types, indexed access types, unions, intersections
export function lift<T>(t: T): T[];
>lift : Symbol(lift, Decl(whatever.d.ts, 8, 63))
>T : Symbol(T, Decl(whatever.d.ts, 10, 21))
>t : Symbol(t, Decl(whatever.d.ts, 10, 24))
>T : Symbol(T, Decl(whatever.d.ts, 10, 21))
>T : Symbol(T, Decl(whatever.d.ts, 10, 21))

=== tests/cases/compiler/simpleJsTypes.js ===
import { Cool, World, dit, keys, single, lift } from './whatever'
>Cool : Symbol(Cool, Decl(simpleJsTypes.js, 0, 8))
>World : Symbol(World, Decl(simpleJsTypes.js, 0, 14))
>dit : Symbol(dit, Decl(simpleJsTypes.js, 0, 21))
>keys : Symbol(keys, Decl(simpleJsTypes.js, 0, 26))
>single : Symbol(single, Decl(simpleJsTypes.js, 0, 32))
>lift : Symbol(lift, Decl(simpleJsTypes.js, 0, 40))

lift
>lift : Symbol(lift, Decl(simpleJsTypes.js, 0, 40))

keys
>keys : Symbol(keys, Decl(simpleJsTypes.js, 0, 26))

single
>single : Symbol(single, Decl(simpleJsTypes.js, 0, 32))

dit
>dit : Symbol(dit, Decl(simpleJsTypes.js, 0, 21))

lift({
>lift : Symbol(lift, Decl(simpleJsTypes.js, 0, 40))

    a: 12,
>a : Symbol(a, Decl(simpleJsTypes.js, 5, 6))

    m() { }
>m : Symbol(m, Decl(simpleJsTypes.js, 6, 10))

});
keys(new Cool());
>keys : Symbol(keys, Decl(simpleJsTypes.js, 0, 26))
>Cool : Symbol(Cool, Decl(simpleJsTypes.js, 0, 8))

single(new World(), 'marvelous');
>single : Symbol(single, Decl(simpleJsTypes.js, 0, 32))
>World : Symbol(World, Decl(simpleJsTypes.js, 0, 14))

dit(101);
>dit : Symbol(dit, Decl(simpleJsTypes.js, 0, 21))


