=== tests/cases/compiler/whatever.d.ts ===
export class Cool {
>Cool : Cool

    spot: number;
>spot : number
}
export class World {
>World : World

    marvelous: string;
>marvelous : string
}
export function dit(smth: number | '0' | '1' | '2'): Cool & World;
>dit : (smth: number | "0" | "1" | "2") => Cool & World
>smth : number | "0" | "1" | "2"
>Cool : Cool
>World : World

export function keys<T>(t: T): keyof T;
>keys : <T>(t: T) => keyof T
>T : T
>t : T
>T : T
>T : T

export function single<T, K extends keyof T>(t: T, k: K): T[K];
>single : <T, K extends keyof T>(t: T, k: K) => T[K]
>T : T
>K : K
>T : T
>t : T
>T : T
>k : K
>K : K
>T : T
>K : K

// TODO: Index types, indexed access types, unions, intersections
export function lift<T>(t: T): T[];
>lift : <T>(t: T) => T[]
>T : T
>t : T
>T : T
>T : T

=== tests/cases/compiler/simpleJsTypes.js ===
import { Cool, World, dit, keys, single, lift } from './whatever'
>Cool : typeof Cool
>World : typeof World
>dit : (smth: number | "0" | "1" | "2") => object
>keys : (t: object) => string
>single : (t: object, k: object) => object
>lift : (t: object) => object[]

lift
>lift : (t: object) => object[]

keys
>keys : (t: object) => string

single
>single : (t: object, k: object) => object

dit
>dit : (smth: number | "0" | "1" | "2") => object

lift({
>lift({    a: 12,    m() { }}) : object[]
>lift : (t: object) => object[]
>{    a: 12,    m() { }} : object

    a: 12,
>a : number
>12 : 12

    m() { }
>m : () => void

});
keys(new Cool());
>keys(new Cool()) : "spot"
>keys : (t: object) => string
>new Cool() : Cool
>Cool : typeof Cool

single(new World(), 'marvelous');
>single(new World(), 'marvelous') : string
>single : (t: object, k: object) => object
>new World() : World
>World : typeof World
>'marvelous' : "marvelous"

dit(101);
>dit(101) : object
>dit : (smth: number | "0" | "1" | "2") => object
>101 : 101


